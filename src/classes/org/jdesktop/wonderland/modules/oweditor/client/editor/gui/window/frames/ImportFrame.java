
package org.jdesktop.wonderland.modules.oweditor.client.editor.gui.window.frames;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.io.File;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.ResourceBundle;

import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.jdesktop.wonderland.modules.oweditor.client.editor.datainterfaces.IImage;
import org.jdesktop.wonderland.modules.oweditor.client.editor.gui.GUISettings;

/**
 * This frame is used for importing kmz models.
 * 
 * @author Patrick
 */
public class ImportFrame extends javax.swing.JFrame {

    private static final long serialVersionUID = 10;
    
    private static final ResourceBundle BUNDLE = ResourceBundle.getBundle(
            "org/jdesktop/wonderland/modules/oweditor/client/resources/Bundle");

    private String lastDirModel = "";
    private FrameController fc = null;
    
    private int boundsX = 0;
    private int boundsY = 0;
    private boolean working = false;
    private NumberFormat doubleFormat = null;
    
    private String[] serverList = null;
    //if a modell was already loaded, it has to be deleted.
    private boolean modelLoaded = false;
    
    //color for the labels.
    private final Color errorColor = Color.red;
    private final Color normalColor = Color.black;
    private String imgName = null;
    private String imgDir = null;
    
    //font for the labels.
    private Font normalFont = null;
    
    private JDialog loadingDialog = null;
            
    /**
     * Creates new form NewJFrame
     * 
     * @param fc A frameController instance.
     * @param serverList A serverlist, containing all available server.
     */
    public ImportFrame(FrameController fc, String[] serverList) {
        this.serverList = serverList;
        this.fc = fc;
        
        initComponents();
        reset();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        doubleFormat = new DecimalFormat("0.#####");
        doubleFormat.setGroupingUsed(false);

        DecimalFormatSymbols custom=new DecimalFormatSymbols();
        custom.setDecimalSeparator('.');
        ((DecimalFormat) doubleFormat).setDecimalFormatSymbols(custom);
        
        modelButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        yLabel = new javax.swing.JLabel();
        zLabel = new javax.swing.JLabel();
        locationFieldY = new javax.swing.JFormattedTextField(doubleFormat);
        locationFieldZ = new javax.swing.JFormattedTextField(doubleFormat);
        locationButton = new javax.swing.JButton();
        xLabel = new javax.swing.JLabel();
        locationFieldX = new javax.swing.JFormattedTextField(doubleFormat);
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        modelNameLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        modelField = new javax.swing.JTextField();
        moduleNameField = new javax.swing.JTextField();
        image = new ImageButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        rotXLabel = new javax.swing.JLabel();
        rotYLabel = new javax.swing.JLabel();
        rotZLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        
        if(serverList == null)
            server = new javax.swing.JComboBox<String>();
        else
            server = new javax.swing.JComboBox<String>(serverList);
        
        rotationFieldX = new javax.swing.JFormattedTextField(doubleFormat);
        rotationFieldY = new javax.swing.JFormattedTextField(doubleFormat);
        rotationFieldZ = new javax.swing.JFormattedTextField(doubleFormat);
        jPanel5 = new javax.swing.JPanel();
        scaleLabel = new javax.swing.JLabel();
        moduleNameLabel = new javax.swing.JLabel();
        scaleField = new javax.swing.JFormattedTextField(doubleFormat);
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText(BUNDLE.getString("Location"));

        yLabel.setText("Y:");

        zLabel.setText("Z:");

        locationButton.setText(BUNDLE.getString("ImportLocButton"));
        locationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationButtonActionPerformed(evt);
            }
        });

        xLabel.setText("X:");
        locationFieldX.setText("0");
        locationFieldY.setText("0");
        locationFieldZ.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(zLabel)
                            .addComponent(yLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(xLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(locationFieldY)
                            .addComponent(locationFieldZ)
                            .addComponent(locationFieldX, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(locationButton)
                        )
                    ))
                .addContainerGap(45, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {locationFieldX, locationFieldY, locationFieldZ});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xLabel)
                    .addComponent(locationFieldX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yLabel)
                    .addComponent(locationFieldY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zLabel)
                    .addComponent(locationFieldZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(locationButton)
                .addGap(20, 20, 20))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {locationFieldX, locationFieldY, locationFieldZ});

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText(BUNDLE.getString("ImportModel"));
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        modelNameLabel.setText(BUNDLE.getString("Name"));
        modelNameLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        
        moduleNameLabel.setText(BUNDLE.getString("ImportModuleName"));
        moduleNameLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText(BUNDLE.getString("ImportServer"));
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        nameField.setToolTipText("");

        modelField.setEditable(false);
        modelField.setToolTipText(BUNDLE.getString("ImportModelTooltipp"));
        modelField.setEnabled(false);
        modelField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelFieldActionPerformed(evt);
            }
        });

        modelButton.setText(BUNDLE.getString("Select"));
        modelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelButtonActionPerformed(evt);
            }
        });

        image.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imgButtonActionPerformed(evt);
            }
        });

        //image.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout ImageLayout = new javax.swing.GroupLayout(image);
        image.setLayout(ImageLayout);
        ImageLayout.setHorizontalGroup(
            ImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 115, Short.MAX_VALUE)
        );
        ImageLayout.setVerticalGroup(
            ImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(modelNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moduleNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(modelField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(modelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        //.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGap(25,25,25)
                        .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(moduleNameField)
                        .addComponent(server))
                .addContainerGap())
        );
       jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {server, nameField, moduleNameField});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(modelField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(modelButton))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(modelNameLabel)
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(moduleNameLabel)
                            .addComponent(moduleNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10,10,10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(server, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10))
                    .addComponent(image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(20, 20, 20))
                .addContainerGap())
        );
       jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {nameField, moduleNameField, server});


        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setText(BUNDLE.getString("Rotation"));

        rotXLabel.setText("X:");

        rotYLabel.setText("Y:");

        rotZLabel.setText("Z:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(rotZLabel)
                            .addComponent(rotYLabel)
                            .addComponent(rotXLabel))
                        .addGap(50, 50, 50)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(rotationFieldY, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rotationFieldX, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rotationFieldZ, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {rotationFieldX, rotationFieldY, rotationFieldZ});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rotXLabel)
                    .addComponent(rotationFieldX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rotYLabel)
                    .addComponent(rotationFieldY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rotZLabel)
                    .addComponent(rotationFieldZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {rotationFieldX, rotationFieldY, rotationFieldZ});

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        scaleLabel.setText(BUNDLE.getString("Scale"));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scaleLabel)
                .addGap(27, 27, 27)
                .addComponent(scaleField, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scaleLabel)
                    .addComponent(scaleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        okButton.setText(BUNDLE.getString("OK"));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText(BUNDLE.getString("Cancel"));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        resetButton.setText(BUNDLE.getString("Reset"));
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resetButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(okButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton)
                    .addComponent(resetButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setLocation(GUISettings.FRAMEPOSX, GUISettings.FRAMEPOSY);  
        setTitle(BUNDLE.getString("ImportTitle"));
        setDefaultCloseOperation(HIDE_ON_CLOSE);
        setResizable(false);
        pack();
    }// </editor-fold>                        

    protected void imgButtonActionPerformed(ActionEvent evt) {
        ImageSelectionFrame frame = fc.getImageSelectionFrame();
        frame.setLocationRelativeTo(this);
        frame.setActive(imgName, imgDir);
        
        /*
         * Listener for when the image selection frame is closed.
         */
        frame.addComponentListener(new ComponentListener() {

            @Override
            public void componentResized(ComponentEvent e) {
                // TODO Auto-generated method stub
            }

            @Override
            public void componentMoved(ComponentEvent e) {
                // TODO Auto-generated method stub
            }

            @Override
            public void componentShown(ComponentEvent e) {
                // TODO Auto-generated method stub
            }

            @Override
            public void componentHidden(ComponentEvent e) {
                IImage img = fc.imageSelection.getSelectedImage();
                fc.imageSelection.removeComponentListener(this);
                
                if(img == null){
                    image.setImage(null);
                    imgName = null;
                    imgDir = null;
                }else{
                    image.setImage(img.getImage());
                    imgName = img.getName();
                    imgDir = img.getDir();
                }
            }

        });
        frame.setVisible(true);
    }

    private void locationButtonActionPerformed(java.awt.event.ActionEvent evt) { 
        working = true;
        
        //TODO: Should also add a focus to the drawing panel,
        //otherwise null pointer!
        this.setVisible(false);
        
        double rotation = Double.valueOf(rotationFieldZ.getText());
        double scale = Double.valueOf(scaleField.getText());
        fc.mainframe.toFront();
        fc.window.chooseLocation(boundsX, boundsY, rotation, scale);
    }                                               

    private void modelFieldActionPerformed(java.awt.event.ActionEvent evt) {                                          
        modelButtonActionPerformed(evt);
    }          
    
    private void modelButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File (lastDirModel));
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "KMZ Models", "kmz");
        chooser.removeChoosableFileFilter(chooser.getAcceptAllFileFilter());
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        
        if(returnVal == JFileChooser.APPROVE_OPTION) {                        
            File file = chooser.getSelectedFile();
            loadModel(file);
        }             
    }  
    
    public void loadModel(File file){
        String name = file.getName();
        final String path = file.getAbsolutePath();
        
        
        //split url, to get the name without the file type
        String[] tokens = name.split("\\.(?=[^\\.]+$)");
        
        //if something with the file is wrong
        if(tokens[0] == null || tokens[tokens.length-1] == null){
            showError(BUNDLE.getString("FileReadError"),
                    BUNDLE.getString("FileReadErrorTitle"));
            return;
        }
        
        if(!tokens[tokens.length-1].equals("kmz")){
            showError("kein kmz","no kmz");
            return;
        }
        
        modelField.setText(path);
        lastDirModel = file.getParent();
        
        //set name, if nothing has been entered already
        if(nameField.getText().equals("")){
            nameField.setText(tokens[0]);
        }
        if(moduleNameField.getText().equals("")){
            moduleNameField.setText(tokens[0]);
        }
        
        loadingDialog = new WaitingDialog(this, BUNDLE.getString("Dialog_Loading"));
        //a new thread is created because loading blocks
        //the frame thread.
        new Thread(){
            @Override
            public void run(){
                int[] bounds = fc.window.loadKMZ(path);
                
                if(bounds == null || bounds.length<2){
                    showError(BUNDLE.getString("ImportWrongBounds"),
                            BUNDLE.getString("ImportWrongBoundsTitle"));
                    loadingDialog.dispose();
                    return;
                }

                boundsX = bounds[0];
                boundsY = bounds[1];
                okButton.setEnabled(true);
                locationButton.setEnabled(true);
                modelLoaded = true;
                
                //wait for loading dialog to be ready.
                while(!loadingDialog.isVisible()){
                    yield();
                }
                loadingDialog.dispose();
                
            }
        
        }.start();
        loadingDialog.setLocationRelativeTo(this);
        loadingDialog.setVisible(true);
        
    }                               

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {     
        resetLabelColor(); 
        
        
        final String name = nameField.getText();
        final String module_name = moduleNameField.getText();
        final String server_name = server.getSelectedItem().toString();

        double x = 0;
        double y = 0;
        double z = 0;
        double rot_x = 0;
        double rot_y = 0;
        double rot_z = 0;
        double scale = 1;
        
        boolean error = false;
        
        if(name.equals("")){
            setLabelColorError(modelNameLabel);
            error = true;
        }
        
        if(module_name.equals("")){
            setLabelColorError(moduleNameLabel);
            error = true;
        }
        
        try{
            x = Double.valueOf(locationFieldX.getText().replace(",", "."));
        }catch(NumberFormatException ex){
            setLabelColorError(xLabel);
            error = true;
        }
        try{
            y = Double.valueOf(locationFieldY.getText().replace(",", "."));
        }catch(NumberFormatException ex){
            setLabelColorError(yLabel);
            error = true;
        }
        try{
            z = Double.valueOf(locationFieldZ.getText().replace(",", "."));
        }catch(NumberFormatException ex){
            setLabelColorError(zLabel);
            error = true;
        }
        
        try{
            rot_x = Double.valueOf(rotationFieldX.getText().replace(",", "."));
        }catch(NumberFormatException ex){
            setLabelColorError(rotXLabel);
            error = true;
        }
        try{
            rot_y = Double.valueOf(rotationFieldY.getText().replace(",", "."));
        }catch(NumberFormatException ex){
            setLabelColorError(rotYLabel);
            error = true;
        }
        try{
            rot_z = Double.valueOf(rotationFieldZ.getText().replace(",", "."));
        }catch(NumberFormatException ex){
            setLabelColorError(rotZLabel);
            error = true;
        }
        try{
            scale = Double.valueOf(scaleField.getText().replace(",", "."));
        }catch(NumberFormatException ex){
            setLabelColorError(scaleLabel);
            error = true;
        }     
        if(scale == 0)
            scale = 1;
        
        if(error){
            showError(BUNDLE.getString("ImportMissingError"), 
                    BUNDLE.getString("ImportMissingErrorTitle"));
            return;
        }  
       
        //check for module name conflicts.
        if(fc.window.importCheckName(module_name, server_name)){
            Object[] options = {BUNDLE.getString("Overwrite"),
                    BUNDLE.getString("Cancel")};
            int ret2 = JOptionPane.showOptionDialog(this,
                BUNDLE.getString("ModuleConflictError"),
                BUNDLE.getString("ConflictErrorTitle"),
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[1]);
            //cancel
            if(ret2==1){
                return;
            }
        }
        
        //make everything final for the thread.
        final double xf = x;
        final double yf = y;
        final double zf = z;
        final double rot_xf = rot_x;
        final double rot_yf = rot_y;
        final double rot_zf = rot_z;
        final double scalef = scale;

        loadingDialog = new WaitingDialog(this, BUNDLE.getString("Dialog_Loading"));
        
        new Thread(){
                @Override
                public void run(){
                    boolean ret_val = fc.window.importKMZ(name, module_name, 
                            imgName, imgDir,
                            xf, yf, zf, 
                             rot_xf, rot_yf, rot_zf, scalef);
                    
                    //wait for loading dialog to be ready.
                    while(!loadingDialog.isVisible()){
                        yield();
                    }
                    
                    loadingDialog.dispose();

                     if(!ret_val){
                         showError("Could not import.", "Import Error");
                         return;
                     }

                    working = false;
                    setVisible(false);
                }
        }.start();
        
        loadingDialog.setVisible(true);
        loadingDialog.setLocationRelativeTo(this);
    } 

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        working = false;
        setVisible(false);
    } 

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
        reset();
    } 
    
    @Override
    public void setVisible(boolean b) {

        //check visibility before super. This is done to not delete everything
        //when the window is just out of focus.
        if(isVisible() && b){
            super.setVisible(b);    
            return;
        }
        
        super.setVisible(b);   
        setLocationRelativeTo(fc.mainframe);
        resetLabelColor();
        
        //working means, the choose location button was hit.
        if(b && working){
            working = false;
            return;
        }else if(!b && working)
            return;
        
        working = false;
        
        if(!b){
            //removes imported model.
            if(modelLoaded){
                fc.window.cancelImport();
                modelLoaded = false;
            }
            
            modelField.setText("");
            nameField.setText("");
            moduleNameField.setText("");
            image.setImage(null);
            reset();
        }else{
            if(serverList == null || serverList.length == 0){
                showError("No server" , "Servererror");
                setVisible(false);
            }
            okButton.setEnabled(false);
            locationButton.setEnabled(false);
        }
    }                

    /**
     * Sets values into the location fields.
     * 
     * @param x The x coordinate.
     * @param y The y coordinate.
     */
    public void setLocation(double x, double y) {
        //formatting the string in order to look nice
        //and to not change the textfield size.
        locationFieldX.setText(doubleFormat.format(x).replace(",", "."));
        locationFieldY.setText(doubleFormat.format(y).replace(",", "."));
    }
    
    /**
     * Resets the form. Means it sets all field values to zero.
     */
    private void reset(){
        if(normalFont == null)
            normalFont = jLabel2.getFont();
        
        locationFieldX.setText("0");
        locationFieldY.setText("0");
        locationFieldZ.setText("0");
        rotationFieldX.setText("0");
        rotationFieldY.setText("0");
        rotationFieldZ.setText("0");
        scaleField.setText("1");
    }
    
    /**
     * Shows an error message.
     * 
     * @param text The text of the message.
     * @param title The title.
     */
    private void showError(String text, String title){
        JOptionPane.showMessageDialog(this,
                text, title, JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Sets the color of one label to the error color (usually red).
     * 
     * @param label The label.
     */
    private void setLabelColorError(JLabel label){
        Font font = label.getFont();
        
        if(normalFont == null)
            normalFont = font;
        
        Font boldFont = new Font(font.getFontName(), Font.BOLD, font.getSize());
        label.setFont(boldFont);
        label.setForeground(errorColor);
    }
    
    /**
     * Resets the color for every label to standard (usually black).
     */
    private void resetLabelColor(){
        
        setLabelColorStandard(xLabel, Color.red);
        setLabelColorStandard(yLabel, Color.blue);
        setLabelColorStandard(zLabel, Color.green);
        setLabelColorStandard(rotXLabel, Color.red);
        setLabelColorStandard(rotYLabel, Color.blue);
        setLabelColorStandard(rotZLabel, Color.green);
        setLabelColorStandard(scaleLabel);
        setLabelColorStandard(modelNameLabel);
        setLabelColorStandard(moduleNameLabel);
    }
    
    /**
     * Sets one label to standard color.
     * 
     * @param label The label.
     */
    private void setLabelColorStandard(JLabel label){
        label.setFont(normalFont);
        label.setForeground(normalColor);
    }
    
    /**
     * Sets one label to a color.
     * 
     * @param label The label.
     * @param color The color.
     */
    private void setLabelColorStandard(JLabel label, Color color){
        if(normalFont != null)
            label.setFont(normalFont);
        label.setForeground(color);
    }

    // Variables declaration - do not modify                     
    private ImageButton image;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton okButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton locationButton;
    private javax.swing.JButton modelButton;
    private javax.swing.JTextField modelField;
    private javax.swing.JTextField nameField;
    private javax.swing.JTextField moduleNameField;
    private javax.swing.JLabel moduleNameLabel;
    private javax.swing.JLabel modelNameLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel xLabel;
    private javax.swing.JLabel yLabel;
    private javax.swing.JLabel zLabel;
    private javax.swing.JLabel rotXLabel;
    private javax.swing.JLabel rotYLabel;
    private javax.swing.JLabel rotZLabel;
    private javax.swing.JLabel scaleLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JFormattedTextField locationFieldX;
    private javax.swing.JFormattedTextField locationFieldY;
    private javax.swing.JFormattedTextField locationFieldZ;
    private javax.swing.JFormattedTextField rotationFieldX;
    private javax.swing.JFormattedTextField rotationFieldY;
    private javax.swing.JFormattedTextField rotationFieldZ;
    private javax.swing.JFormattedTextField scaleField;
    private javax.swing.JComboBox<String> server;
    // End of variables declaration   
}
