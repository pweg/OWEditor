package org.jdesktop.wonderland.modules.oweditor.client.editor.gui.window.frames;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ResourceBundle;

import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.jdesktop.wonderland.modules.oweditor.client.editor.datainterfaces.IImage;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Patrick
 */
public class ImageSelectionFrame extends javax.swing.JFrame {
    
    private static final ResourceBundle BUNDLE = ResourceBundle.getBundle(
            "org/jdesktop/wonderland/modules/oweditor/client/resources/Bundle");

    private FrameController fc = null;
    
    private ArrayList<IImage> imgs = null;
    private ArrayList<ImageToggleButton> buttons = null;
    
    private int original = -1;
    private int active = -1;
    
    private String lastDir = "";


    /**
     * Creates new form ImageSelectionFrame
     */
    public ImageSelectionFrame(FrameController fc) {
        this.fc  = fc;
        
        initComponents();
        
        imgs = new ArrayList<IImage>(); 
        buttons = new ArrayList<ImageToggleButton>();

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        imagePanel = new javax.swing.JPanel(new GridBagLayout());
        imageScrllPanel = new javax.swing.JScrollPane(imagePanel);
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        importButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        okButton.setText(BUNDLE.getString("OK"));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        cancelButton.setText(BUNDLE.getString("Cancel"));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        importButton.setText(BUNDLE.getString("ImageAdd"));
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 232, Short.MAX_VALUE)
                        .addComponent(importButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(imageScrllPanel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imageScrllPanel, 
                        347, 
                        javax.swing.GroupLayout.PREFERRED_SIZE, 
                        javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton)
                    .addComponent(importButton))
                .addContainerGap())
        );

        setTitle(BUNDLE.getString("ImageSelect"));
        setDefaultCloseOperation(HIDE_ON_CLOSE);
        //this.setResizable(false);

        pack();
    }// </editor-fold>      
    

    /**
     * Builds the image panel with the images that were stored
     * previously.
     */
    private void buildImagePanel() {
        imagePanel.removeAll();
        GridBagConstraints c = new GridBagConstraints();
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridwidth = 1;
        c.gridheight = 1;
        c.weightx = 1;
        c.weighty = 1;

        int x=0;
        int y=0;
        int count = 0;
        
        ActionListener action = new ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectActionPerformed(evt);
            }
        };
        
        for(IImage img : imgs){
            c.gridx = x;
            c.gridy = y;
            ImageToggleButton button = new ImageToggleButton(img.getImage());
            button.setPreferredSize(new Dimension(
                    imageScrllPanel.getWidth()/3, 
                    imageScrllPanel.getHeight()/3));
            button.setName(Integer.toString(count));
            button.addActionListener(action);
            buttons.add(button);
            
            imagePanel.add(button, c);
            x++;
            count++;
            if(x >= 3){
                y++;
                x=0;
            }
        }        
    }

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {  
        active = original;
        this.setVisible(false);
    }    

    private void okActionPerformed(java.awt.event.ActionEvent evt) {                                         
        this.setVisible(false);
    }   

    private void importActionPerformed(java.awt.event.ActionEvent evt) {  
        
        JFileChooser chooser = new JFileChooser(new File (lastDir));
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "JPG", "jpg", "jpeg", "JPEG");
        FileNameExtensionFilter filter2 = new FileNameExtensionFilter(
                "GIF", "gif", "GIF");
        FileNameExtensionFilter filter3 = new FileNameExtensionFilter(
                "PNG", "png", "PNG");
        FileNameExtensionFilter filter4 = new FileNameExtensionFilter(
                "BMP", "bmp", "BMP");
        chooser.removeChoosableFileFilter(chooser.getAcceptAllFileFilter());
        chooser.addChoosableFileFilter(filter);
        chooser.addChoosableFileFilter(filter2);
        chooser.addChoosableFileFilter(filter3);
        chooser.addChoosableFileFilter(filter4);
        chooser.setMultiSelectionEnabled(true);
        
        int returnVal = chooser.showOpenDialog(this);
        
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File[] files = chooser.getSelectedFiles();
            
            for(File file : files){

                String path = file.getAbsolutePath();
                lastDir = file.getParent();
                
                try {
                    BufferedImage img = null;
                    img = ImageIO.read(new File(path));
                    fc.window.uploadImage(path);
                    
                } catch (IOException e) {
                    showError(BUNDLE.getString("ImageError"),BUNDLE.getString("ImageErrorTitle"));
                }
            }
            setImageLib(fc.window.getImgLib());
        }
    } 
    
    private void selectActionPerformed(java.awt.event.ActionEvent evt) {         
        Object src = evt.getSource();             
        
        if(src instanceof ImageToggleButton){
            ImageToggleButton button = (ImageToggleButton) src;
            try{            
                int current = Integer.valueOf(button.getName());
                if(active != -1 && active < buttons.size() &&
                        current != active)
                        buttons.get(active).setSelected(false);   
                
                //This has to be done in order to let the user
                //unselect the image, if he wants to.
                if(button.isSelected())
                    active = current;
                else
                    active = -1;
                
            }catch(Exception e){
                active = -1;
            }
        }
    } 
    
    
    public IImage getSelectedImage(){
        if(active == -1 || active >= imgs.size())
            return null;
        
        return imgs.get(active);
    }
    
    private void reset(){
        for(ImageToggleButton button : buttons){
            button.setSelected(false);
        }
        if(original == -1 || original >= buttons.size())
            return;
        buttons.get(original).setSelected(true);
    }
    
    /**
     * Sets the image library.
     * 
     * @param imgs The image library as array list.
     */
    public void setImageLib(ArrayList<IImage> imgs){
        this.imgs = imgs;
        buildImagePanel();
    }
    
    @Override
    public void setVisible(boolean b){
        if(b){
            original = active;
            reset();
        }
        super.setVisible(b);
    }
    /**
     * Shows an error message.
     * 
     * @param text The text of the message.
     * @param title The title.
     */
    private void showError(String text, String title){
        JOptionPane.showMessageDialog(this,
                text, title, JOptionPane.ERROR_MESSAGE);
    }

    

    // Variables declaration - do not modify                     
    private javax.swing.JButton okButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton importButton;
    private javax.swing.JScrollPane imageScrllPanel;
    private javax.swing.JPanel imagePanel;
    // End of variables declaration                   
}

